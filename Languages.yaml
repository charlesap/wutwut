Julia:
 lc: '#'
 xComment: "#"
 xModuleStart: "module ${mn}"
 xModuleEnd: "end # module"
 xModuleInitStart: ""                       
 xModuleInitEnd: ""                                                                       
 xMainPreStart: ""
 xMainPostEnd: ""
 xMainStart: "function  main(args)"
 xMainFuncImport: ""
 xMainFuncPreamble: ""
 xMainEnd: "end\nexport main"         
 xTestStart: "function  main(args)"
 xTestFuncImport: ""
 xTestFuncPreamble: ""
 xTestEnd: "end\nexport main"
 xHasImplicitImports: "No"
 DefFileName: ""
 ImpSubPrefix: ""
 ImpFileName: "${en}.jl"
 RefFileName: "${en}.jl"                                                                    
 ImportStart: ""
 ImportEnd: ""
 ImportElement: "include(\"${inm}\")"
 LinkElement: ""
 GuardStart: ""                                                                             
 GuardEnd: ""                                                                               
 StructStart: "julia ${snm} is "
 StructEnd: ""
 StructElement: "${enm} ${etp}"              
 StructElementImported: "${enm}: ${em}.${etp},"                                                          
 FuncImpStart: "function ${fnm}(${fprm})"
 FuncImpEnd: ""
 FuncDef: ""
 MetaText: "Julia 0.6"
 Typemap:                      
    Int64: Int64
    Float64: Float64
    AbstractString: AbstractString
Go:
 lc: "//"
 xComment: "//"
 xModuleStart: "package ${mn}"
 xModuleEnd: ""
 xModuleInitStart: ""
 xModuleInitEnd: ""
 xMainPreStart: ""
 xMainPostEnd: ""
 xMainStart: "func  main(){"
 xMainFuncImport: "package main\n\nimport \"fmt\"\nimport \"github.com/charlesap/wutgo\"\n\n"         
 xMainFuncPreamble: "  wut.Initialize()\n  fmt.Println(\"izit version 0.0.0\")"                 
 xMainEnd: "}"         
 xTestStart: "func  main(){"
 xTestFuncImport: "package main\n\nimport \"testing\"\n\n"
 xTestFuncPreamble: ""
 xTestEnd: "}"
 xHasImplicitImports: "Yes"            
 DefFileName: ""
 ImpSubPrefix: ""                                                                                            
 ImpFileName: "${en}.go"
 RefFileName: "${en}"                                                                    
 ImportStart: ""
 ImportEnd: ""               
 ImportElement: "import \"${inm}\""
 LinkElement: ""                                                                                             
 GuardStart: ""                                                                             
 GuardEnd: ""                                                                               
 StructStart: "type ${snm} struct {"
 StructEnd: "}"
 StructElement: "${enm} ${etp}"
 StructElementImported: "${enm} ${etp}"                                                          
 FuncImpStart: "func ${fnm}(${fprm}) ${ftyp}{"
 FuncImpEnd: "}"       
 FuncDef: ""          
 MetaText: ""
 Typemap:
    Int64: int64
    Float64: float64
    AbstractString: string
    Bool: bool
    _nothing_: ""
Python:
 lc: "#"
 xComment: "#"
 xModuleStart: "# ${mn} module"
 xModuleEnd: ""
 xModuleInitStart: ""                       
 xModuleInitEnd: ""                                  
 xMainPreStart: ""
 xMainPostEnd: ""
 xMainStart: "if __name__ ==  '__main__':"
 xMainFuncImport: ""         
 xMainFuncPreamble: "  #Initialize()\n  print('izit version 0.0.0')\n"                 
 xMainEnd: ""         
 xTestStart: "if __name__ ==  '__main__':"
 xTestFuncImport: ""
 xTestFuncPreamble: ""
 xTestEnd: ""
 xHasImplicitImports: "No"            
 DefFileName: ""
 ImpSubPrefix: ""                                                                                            
 ImpFileName: "${en}.py"
 RefFileName: "${en}"                                                                    
 ImportStart: ""
 ImportEnd: ""               
 ImportElement: "import ${inm}"
 LinkElement: ""                                                                                             
 GuardStart: ""                                                                             
 GuardEnd: ""                                                                               
 StructStart: "type ${snm} struct {"
 StructEnd: "}"
 StructElement: "${enm} ${etp}"              
 StructElementImported: "${enm}: ${em}.${etp},"                                                          
 FuncImpStart: "def ${fnm}(${fprm}):\n  pass"
 FuncImpEnd: ""       
 FuncDef: ""          
 MetaText: ""
 Typemap:                      
    Int64: integer             
    Float64: float
    AbstractString: string
Java:
 lc: "//"
 xComment: "//"
 xModuleStart: "package ${mn};"
 xModuleEnd: ""
 xModuleInitStart: ""                       
 xModuleInitEnd: ""                                  
 xMainPreStart: ""
 xMainPostEnd: ""
 xMainStart: "public static  main( String[] args ){"
 xMainFuncImport: ""         
 xMainFuncPreamble: ""                 
 xMainEnd: "}"         
 xTestStart: "public static  main( String[] args ){"
 xTestFuncImport: ""
 xTestFuncPreamble: ""
 xTestEnd: "}"
 xHasImplicitImports: "No"            
 DefFileName: ""
 ImpSubPrefix: ""                                                                                            
 ImpFileName: "${en}.java"
 RefFileName: "${en}"                                                                       
 ImportStart: ""
 ImportEnd: ""               
 ImportElement: "import ${inm};"
 LinkElement: ""                                                                                             
 GuardStart: ""
 GuardEnd: ""
 StructStart: "type ${snm} struct {"
 StructEnd: "}"
 StructElement: "${enm} ${etp}"              
 StructElementImported: "${enm}: ${em}.${etp},"                                                          
 FuncImpStart: "function ${fnm}(${fprm})"
 FuncImpEnd: ""       
 FuncDef: ""          
 MetaText: ""
 Typemap:                      
    Int64: integer             
    Float64: float
    AbstractString: string
c:
 lc: "//"
 xComment: "//"
 xModuleStart: "// implementing ${mn}"
 xModuleEnd: "// end of implementation"
 xModuleInitStart: ""                       
 xModuleInitEnd: ""                                  
 xMainPreStart: ""
 xMainPostEnd: ""
 xMainStart: "void  main(void){"
 xMainFuncImport: "\n\n#include <stdio.h>\n#include \"wut.h\"\n"         
 xMainFuncPreamble: "  Initialize();\n  printf(\"izit version 0.0.0\\n\");"                 
 xMainEnd: "}"         
 xTestStart: "void  main(void){"
 xTestFuncImport: "\n\n#include <stdio.h>\n#include \"wut.h\"\n"
 xTestFuncPreamble: "  Initialize();\n  printf(\"izit version 0.0.0\\n\");"
 xTestEnd: "}"
 xHasImplicitImports: "No"            
 DefFileName: "${en}.h"
 ImpSubPrefix: ""                                                                                            
 ImpFileName: "${en}.c"
 RefFileName: "${en}"                                                                       
 ImportStart: ""
 ImportEnd: ""               
 ImportElement: "#include \"${inm}\""
 LinkElement: ""                                                                                             
 GuardStart: "#ifndef _${gnm}_\n#define _${gnm}_"
 GuardEnd: "#endif"
 StructStart: "typedef struct {"
 StructEnd: "} ${snm};"
 StructElement: "${etp} ${enm};"              
 StructElementImported: "${etp} ${enm};"                                                          
 FuncImpStart: "${ftyp} ${fnm}(${fprm}){"
 FuncImpEnd: "}//${fnm}"       
 FuncDef: "${ftyp} ${fnm}(${fprm});"          
 MetaText: ""
 Typemap:                      
    Int64: int             
    Float64: float
    AbstractString: "char *"
    Bool: int
    _nothing_: void
cuda:
 lc: "//"
 xComment: "//"
 xModuleStart: "// implementing ${mn}"
 xModuleEnd: "// end of implementation"
 xModuleInitStart: ""
 xModuleInitEnd: ""
 xMainPreStart: ""
 xMainPostEnd: ""
 xMainStart: "void  main(void){"
 xMainFuncImport: "\n\n#include <stdio.h>\n#include \"wut.h\"\n"
 xMainFuncPreamble: "  Initialize();\n  printf(\"izit version 0.0.0\\n\");"
 xMainEnd: "}"
 xTestStart: "void  main(void){"
 xTestFuncImport: "\n\n#include <stdio.h>\n#include \"wut.h\"\n"
 xTestFuncPreamble: "  Initialize();\n  printf(\"izit version 0.0.0\\n\");"
 xTestEnd: "}"
 xHasImplicitImports: "No"
 DefFileName: "${en}.h"
 ImpSubPrefix: ""
 ImpFileName: "${en}.c"
 RefFileName: "${en}"
 ImportStart: ""
 ImportEnd: ""
 ImportElement: "#include \"${inm}\""
 LinkElement: ""
 GuardStart: "#ifndef _${gnm}_\n#define _${gnm}_"
 GuardEnd: "#endif"
 StructStart: "typedef struct {"
 StructEnd: "} ${snm};"
 StructElement: "${etp} ${enm};"
 StructElementImported: "${etp} ${enm};"
 FuncImpStart: "${ftyp} ${fnm}(${fprm}){"
 FuncImpEnd: "}//${fnm}"
 FuncDef: "${ftyp} ${fnm}(${fprm});"
 MetaText: ""
 Typemap:
    Int64: int
    Float64: float
    AbstractString: "char *"
    Bool: int
    _nothing_: void
rust:    
 lc: "//"                                                                                    
 xComment: "//"                                                                            
 xModuleStart: "#![allow(non_snake_case)]\n//mod ${mn}{"
 xxModuleStart: "#![allow(non_snake_case)]\n#![crate_type = \"lib\"]\n#![crate_name = \"${mn}\"]\n//mod ${mn}{"                                                     
 xModuleEnd: "//}// ${mn}"                                                    
 xModuleInitStart: "pub mod ${mn}{"                                                
 xModuleInitEnd: "}//${mn}"                                                                       
 xMainPreStart: ""
 xMainPostEnd: ""
 xMainStart: "pub fn main(){"                                                           
 xMainFuncImport: "\n\nextern crate wut;\n"                           
 xMainFuncPreamble: "  wut::Initialize();\n  println!(\"izit version 0.0.0\");"                     
 xMainEnd: "}"                                                                             
 xTestStart: "pub fn main(){"
 xTestFuncImport: "\n\nextern crate wut;\n"
 xTestFuncPreamble: "  wut::Initialize();\n  println!(\"izit version 0.0.0\");"
 xTestEnd: "}"
 xHasImplicitImports: "No"            
 DefFileName: ""                                                                   
 ImpSubPrefix: "lib"                                                                                            
 ImpFileName: "${en}.rs"                                                                   
 RefFileName: "${en}"                                                                       
 ImportStart: ""                                                                          
 ImportEnd: ""                                                                            
 ImportElement: "pub use ${inm}::${anm};"                                                     
 LinkElement: "mod ${inm};"
 GuardStart: ""                                                                             
 GuardEnd: ""                                                                               
 StructStart: "pub struct ${snm} {"                                                           
 StructEnd: "}"                                                                          
 StructElement: "${enm}: ${etp},"
 StructElementImported: "${enm}: ${em}::${etp},"                                                          
 FuncImpStart: "pub fn ${fnm}(${fprm}){"
 FuncImpEnd: "}//${fnm}"       
 FuncDef: ""          
 MetaText: '[package]
name = "wutrs"
version = "0.0.0"
authors = ["Charles Perkins <chuck@kuracali.com>"]

[dependencies]
'
 Typemap:                                                                                 
    Int64: i64                                                                            
    Float64: f64                                                                        
    AbstractString: String
    Bool: bool                                                               
csharp:  
 lc: "//"                                                                                   
 xComment: "//"                                                                            
 xModuleStart: "namespace ${mn}\n{//    public class ${mn}\n  //  {"                                                     
 xModuleEnd: "//    }\n}// ${mn}"                                                    
 xModuleInitStart: ""                                                
 xModuleInitEnd: ""                                                                       
 xMainPreStart: "public  class ${bn}\n{\n"
 xMainPostEnd: "}"
 xMainStart: "    static public void Main (string[] args)\n    {"                                                                  
 xMainFuncImport: "\n\nusing System;\nusing Wut;\n"                           
 xMainFuncPreamble: "      //Initialize ();\n      Console.WriteLine (\"izit version 0.0.0\");"                    
 xMainEnd: "    }"                                                                             
 xTestStart: "  class binaryname{\n    static void Main (string[] args){"
 xTestFuncImport: "\n\nusing System;\nusing wut;\n"
 xTestFuncPreamble: "  Initialize()\n  Console.WriteLine(\"izit version 0.0.0\");"
 xTestEnd: "  }\n    }"
 xHasImplicitImports: "No"            
 DefFileName: ""                                                                          
 ImpSubPrefix: ""                                                                                            
 ImpFileName: "${en}.cs"                                                                  
 RefFileName: "${en}"                                                                       
 ImportStart: ""                                                                          
 ImportEnd: ""                                                                            
 ImportElement: "//using ${inm}"                                                              
 LinkElement: ""                                                                                             
 GuardStart: ""                                                                             
 GuardEnd: ""                                                                               
 StructStart: "  public class ${snm} {"                                                           
 StructEnd: "  }"                                                                          
 StructElement: "//${enm}: ${etp},"                                                         
 StructElementImported: "//${enm}: ${em}.${etp},"                                                          
 FuncImpStart: "    public void ${fnm} (${fprm})\n    {"
 FuncImpEnd: "    }\n"       
 FuncDef: ""          
 MetaText: ""                                                                             
 Typemap:                                                                                 
    Int64: i64                                                                            
    Float64: f64                                                                          
    AbstractString: str                                                                   
Verilog:
 lc: "--"
 xComment: "--"
 xModuleStart: "entity ${mn} is\nend;"
 xModuleEnd: ""
 xModuleInitStart: ""                       
 xModuleInitEnd: ""                                  
 xMainPreStart: ""
 xMainPostEnd: ""
 xMainStart: "architecture ${mn} is\nbegin\n"
 xMainFuncImport: ""         
 xMainFuncPreamble: ""                 
 xMainEnd: "end ${mn};"         
 xTestStart: "architecture ${mn} is\nbegin\n"
 xTestFuncImport: ""
 xTestFuncPreamble: ""
 xTestEnd: "end ${mn};"
 xHasImplicitImports: "No"            
 DefFileName: ""
 ImpSubPrefix: ""                                                                                            
 ImpFileName: "${en}.vhdl"
 RefFileName: "${en}"                                                                       
 ImportStart: ""
 ImportEnd: ""               
 ImportElement: "use ${inm};"
 LinkElement: ""                                                                                             
 GuardStart: ""                                                                             
 GuardEnd: ""                                                                               
 StructStart: "type ${snm} struct {"
 StructEnd: "}"
 StructElement: "${enm} ${etp}"              
 StructElementImported: "${enm}: ${em}.${etp},"                                                          
 FuncImpStart: "function ${fnm}(${fprm})"
 FuncImpEnd: ""       
 FuncDef: ""          
 MetaText: ""
 Typemap:                      
    Int64: integer             
    Float64: float
    AbstractString: string
Haskell:
 lc: "--"
 xComment: "--"
 xModuleStart: "module ${mn}"
 xModuleEnd: "end # module"
 xModuleInitStart: ""                       
 xModuleInitEnd: ""                                  
 xMainPreStart: ""
 xMainPostEnd: ""
 xMainStart: "main = do"
 xMainFuncImport: ""         
 xMainFuncPreamble: ""                 
 xMainEnd: ""         
 xTestStart: "main = do"
 xTestFuncImport: ""
 xTestFuncPreamble: ""
 xTestEnd: ""
 xHasImplicitImports: "No"            
 DefFileName: ""
 ImpSubPrefix: ""                                                                                            
 ImpFileName: "${en}.hs"
 RefFileName: "${en}"                                                                       
 ImportStart: ""
 ImportEnd: ""               
 ImportElement: "import ${inm}"
 LinkElement: ""                                                                                             
 GuardStart: ""                                                                             
 GuardEnd: ""                                                                               
 StructStart: "type ${snm} struct {"
 StructEnd: "}"
 StructElementImported: "${enm}: ${em}.${etp},"                                                          
 StructElement: "${enm} ${etp}"              
 FuncImpStart: "function ${fnm}(${fprm})"
 FuncImpEnd: ""       
 FuncDef: ""          
 MetaText: ""
 Typemap:                      
    Int64: integer             
    Float64: float
    AbstractString: string
Javascript:
 lc: "//"                                           
 xComment: "//"
 xModuleStart: "module ${mn}"                       
 xModuleEnd: "end # module"                  
 xModuleInitStart: ""                       
 xModuleInitEnd: ""                                  
 xMainPreStart: ""
 xMainPostEnd: ""
 xMainStart: "// main"                     
 xMainFuncImport: ""         
 xMainFuncPreamble: " //Initialize();\n  console.log(\"izit version 0.0.0\\n\");"                 
 xMainEnd: ""                                
 xTestStart: "// main"
 xTestFuncImport: ""
 xTestFuncPreamble: ""
 xTestEnd: ""
 xHasImplicitImports: "No"            
 DefFileName: ""
 ImpSubPrefix: ""                                                                                            
 ImpFileName: "${en}.js"
 RefFileName: "${en}"                                                                       
 ImportStart: ""                            
 ImportEnd: ""                              
 ImportElement: "import ${inm}"             
 LinkElement: ""                                                                                             
 GuardStart: ""                                                                             
 GuardEnd: ""                                                                               
 StructStart: "type ${snm} struct {"
 StructEnd: "}"
 StructElement: "${enm} ${etp}"              
 StructElementImported: "${enm}: ${em}.${etp},"                                                          
 FuncImpStart: "function ${fnm}(${fprm}){"
 FuncImpEnd: "}"       
 FuncDef: ""          
 MetaText: '{
  "name": "wutjs",
  "version": "0.0.0",
  "description": "HTM in Javascript",
  "main": "index.js",
  "directories": {
    "test": "test"
  },
  "scripts": {
    "start": "node index.js",
    "test": "test.js"
  },
  "engines": {
    "node": "4.0.0"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/charlesap/wutjs.git"
  },
  "keywords": [
    "HTM"
  ],
  "author": "Charles Perkins",
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/charlesap/wutjs/issues"
  },
  "homepage": "https://github.com/charlesap/wutjs#readme"
}'
 Typemap:                      
    Int64: integer             
    Float64: float
    AbstractString: string


