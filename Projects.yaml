all:
 License: "(rsc/LICENSE:Verbatim)"
wut:
 Language: Go
 Path: "../wutgo"
 SourceFiles: " cmd( [izit.go:Bin] [izit_test.go:Tst] ) [wut.go:Lib] [<encoder>.go:Mod]  [LICENSE:License] " 
 Lib: "(rsc/TOPCOMMENT:Comment)[wut:PackageStart][<_top_/Provides>:Method]"
 Mod: "(rsc/TOPCOMMENT:Comment)[wut:PackageStart][{encoder}:StructureStart][<encoder/Contains>:StructureElement][{encoder}:StructureEnd][<encoder/Provides>:Method]"
 Bin: "(rsc/TOPCOMMENT:Comment)[main:PackageStart][github.com/charlesap/wutgo:Import][main:BinMethod][<_cmd_/Provides>:Method]"
 Tst: "(rsc/TOPCOMMENT:Comment)[test:PackageStart][github.com/charlesap/wutgo:Import][main:TstMethod][<_tst_/Provides>:Method]"
 Meta: ""
 Comment: "// "
 PackageStart: "\npackage ${me}\n"
 Import: "import \"fmt\"\nimport \"${me}\""
 Method: "\nfunc ${me_0}(){\n}"
 BinMethod: "\nfunc main(){\n  wut.Initialize()\n  fmt.Println(\"izit version 0.0.0\")\n}"
 TstMethod: "\nfunc main(){\n  wut.Initialize()\n  fmt.Println(\"testing wut version 0.0.0\")\n}"
 StructureStart: "\ntype ${me} struct {"
 StructureEnd: "}"
 StructureElement: "  ${me_0} <~${me_1}>:<TypeMap~>"
 TypeMap: "Int64/int64 Float64/float64 AbstractString/string Bool/bool _nothing_/\"\""
 SourceSubPath: ""
 TestsSubPath: "cmd"
 MetaFileName: ""
 MainDefFileName: ""
 MainModFileName: "wut"
 MainModFileSubPath: ""  
 MainBinFileName: "izit"
 MainBinFileSubPath: "cmd"    
 MainTestFileName: "izit_test"
 MainModuleName: "wut"
 MainModuleRequirements:
 MakeClean: "cd ../wutgo; rm izit"               
 MakeLib: ""                 
 MakeBin: "cd ../wutgo; go build cmd/izit.go"                 
 MakeTest: ""                
 DoTest: ""
wutpy:
 Language: Python
 Path: "../wutpy"
 SourceFiles: " wut( [__init__.py:MainMod] [izit.py:MainBin] [test.py:MainTest] [<encoder>.py:Mod]) [setup.py:Meta] [LICENSE:License] "
 MainModDef: ""
 MainMod: "(rsc/TOPCOMMENT:Comment)[wut:PackageStart][<encoder>:Import][<encoder/Provides>:Method]"
 ModDef: ""
 Mod: "(rsc/TOPCOMMENT:Comment)[{encoder}:StructureStart][<encoder/Includes>:StructureElement][<encoder/provides>:Method]"
 MainBinDef: ""
 MainBin: "(rsc/TOPCOMMENT:Comment)[main:Method]"
 MainTestDef: ""
 MainTest: "(rsc/TOPCOMMENT:Comment)[test:Method]"
 Meta: "(rsc/setup.py)"
 Comment: "# "
 PackageStart: "# ${me} Module"
 Import: "import \"${me}\""
 Method: "\nfunc ${me}(){\n}"
 StructureStart: "\ntype ${me} struct {"
 StructureElement: "  ${me}"
 SourceSubPath: "wut"
 TestsSubPath: "wut"
 MetaFileName: "setup.py"
 MainDefFileName: ""
 MainModFileName: "__init__"
 MainModFileSubPath: "wut"  
 MainBinFileName: "izit"
 MainBinFileSubPath: "wut"    
 MainTestFileName: "test"
 MainModuleName: "Wut"
 MainModuleRequirements:
 MakeClean: ""               
 MakeLib: ""                 
 MakeBin: ""                 
 MakeTest: ""                
 DoTest: ""
Wut.jl:
 Language: Julia
 Path: "../xWut.jl"
 SourceFiles: " src( [Wut.jl:MainMod] [Izit.jl:MainBin] [<encoder>.jl:Mod]) test( [runtests.jl:MainTest] )  [REQUIRE:Meta] [LICENSE:License] "
 MainMod: "(rsc/TOPCOMMENT:Comment)[Wut:PackageStart][<encoder>:PackageInclude][<_top_/Provides>:Method][Wut:PackageEnd]"
 Mod: "(rsc/TOPCOMMENT:Comment)[Wut:PackageStart][Wut:PackageEnd]"
 MainBin: "(rsc/TOPCOMMENT:Comment)"
 MainTest: "(rsc/TOPCOMMENT:Comment)"
 Meta: ""
 Comment: "# "
 PackageStart: "\nmodule ${me}"
 PackageEnd: "end # module ${me}"
 PackageInclude: "include (\"${me}.jl\")"
 Method: "\nfunction ${me}()\n    #"
 StructureStart: ""
 SourceSubPath: "src"
 TestsSubPath: "test"
 MetaFileName: "REQUIRE"
 MainDefFileName: ""
 MainModFileName: "Wut"
 MainModFileSubPath: "src"
 MainBinFileName: "Izit"
 MainBinFileSubPath: "src"
 MainTestFileName: "runtests"
 MainModuleName: "Wut"
 MainModuleRequirements:
 MakeClean: ""
 MakeLib: ""
 MakeBin: ""
 MakeTest: ""
 DoTest: ""
wutj:
 Language: Java
 Path: "../wutj"
 SourceFiles: " src(main(java( [Wut.java:MainMod] [Izit.java:MainBin] [Test.java:MainTest] [<encoder>.java:Mod]))) [pom.xml:Meta] [LICENSE:License] "
 MainModDef: ""
 MainMod: "(rsc/TOPCOMMENT:Comment)[wut:PackageStart]"
 ModDef: ""
 Mod: "(rsc/TOPCOMMENT:Comment)"
 MainBinDef: ""
 MainBin: "(rsc/TOPCOMMENT:Comment)"
 MainTestDef: ""
 MainTest: "(rsc/TOPCOMMENT:Comment)"
 Meta: "(rsc/pom.xml)"
 Comment: "// "
 PackageStart: "package ${me};"
 SourceSubPath: ""
 TestsSubPath: ""
 MetaFileName: ""
 MainDefFileName: ""
 MainModFileName: "wut"
 MainModFileSubPath: ""  
 MainBinFileName: "izit"
 MainBinFileSubPath: ""     
 MainTestFileName: "test"
 MainModuleName: "Wut"
 MainModuleRequirements:
 MakeClean: ""               
 MakeLib: ""                 
 MakeBin: ""                 
 MakeTest: ""                
 DoTest: ""
wutc:
 Language: c
 Path: "../wutc"
 SourceFiles: " [wut.c:Lib] [wut.h:Libh] [izit.c:Bin] [izit.h:Binh] [test.c:Tst] [test.h:Tsth] [<encoder>.c:Mod] [<encoder>.h:Modh] [LICENSE:License] "
 Lib: "(rsc/TOPCOMMENT:Comment)[wut:PackageStart][<_top_/Provides>:Method]"
 Mod: "(rsc/TOPCOMMENT:Comment)[wut:PackageStart][<encoder/Provides>:Method]"
 Bin: "(rsc/TOPCOMMENT:Comment)[izit:PackageStart][wut:Import][main:Method][<_cmd_/Provides>:Method]"
 Tst: "(rsc/TOPCOMMENT:Comment)[test:PackageStart][wut:Import][main:Method][<_tst_/Provides>:Method]"
 Libh: "(rsc/TOPCOMMENT:Comment)[wut:PackageStart][<_top_/Provides>:MethodDef]"
 Modh: "(rsc/TOPCOMMENT:Comment)[wut:PackageStart][{encoder}:GuardStart][{encoder}:StructureStart][<encoder/Contains>:StructureElement][{encoder}:StructureEnd][<encoder/Provides>:MethodDef][{encoder}:GuardEnd]"
 Binh: "(rsc/TOPCOMMENT:Comment)[izit:PackageStart][wut:Import][main:Method][<_cmd_/Provides>:MethodDef]"
 Tsth: "(rsc/TOPCOMMENT:Comment)[test:PackageStart][wut:Import][main:Method][<_tst_/Provides>:MethodDef]"
 Meta: ""
 PackageStart: "// implementing ${me}"
 Comment: "// "
 Import: "#include ${me}"
 GuardStart: "#ifndef _${me}_\n#define _${me}_"
 GuardEnd: "#endif"
 MethodDef: "\nvoid ${me}();"
 Method: "\nvoid ${me}(){\n}"
 StructureStart: "\ntypedef struct {"
 StructureEnd: "} ${me};"
 StructureElement: "  ${me}"
 SourceSubPath: ""
 TestsSubPath: ""
 MetaFileName: ""
 MainDefFileName: "wut"
 MainModFileName: "wut"
 MainModFileSubPath: ""  
 MainBinFileName: "izit"      
 MainBinFileSubPath: ""        
 MainTestFileName: "test"
 MainModuleName: "wut"
 MainModuleRequirements:
 MakeClean: "cd ../wutc; rm izit"               
 MakeLib: ""                 
 MakeBin: "cd ../wutc; cc -o izit izit.c wut.c"                 
 MakeTest: ""                
 DoTest: ""
wutrs:                        
 Language: rust                 
 Path: "../wutrs"             
 SourceFiles: " src( [wut.rs:MainMod] [izit.rs:MainBin] [<encoder>.rs:Mod]) test( [test.rs:MainTest] ) [Cargo.toml:Meta] [LICENSE:License] "
 MainModDef: ""
 MainMod: "(rsc/TOPCOMMENT:Comment)[wut:PackageStart]"
 ModDef: ""
 Mod: "(rsc/TOPCOMMENT:Comment)"
 MainBinDef: ""
 MainBin: "(rsc/TOPCOMMENT:Comment)"
 MainTestDef: ""
 MainTest: "(rsc/TOPCOMMENT:Comment)"
 Meta: ""
 Comment: "// "
 PackageStart: "#![allow(non_snake_case)]"
 SourceSubPath: "src"           
 TestsSubPath: "test"            
 MetaFileName: "Cargo.toml"
 MainDefFileName: ""      
 MainModFileName: "wut"      
 MainModFileSubPath: "src"      
 MainBinFileName: "izit"     
 MainBinFileSubPath: "src"      
 MainTestFileName: "test"    
 MainModuleName: "wut"      
 MainModuleRequirements:    
 MakeClean: "cd ../wutrs; rm izit"               
 MakeLib: "cd ../wutrs/src; rustc -A dead_code -A non_snake_case --crate-type=lib wut.rs"                 
 MakeBin: "cd ../wutrs/src; rustc -A dead_code -A non_snake_case izit.rs --extern wut=libwut.rlib"                 
 MakeTest: ""                
 DoTest: ""
wutcs:                       
 Language: csharp              
 Path: "../wutcs"            
 SourceFiles: " cmd( [Izit.cs:MainBin]  [Test.cs:MainTest] ) [Wut.cs:MainMod] [<encoder>.cs:Mod] [LICENSE:License] "
 MainModDef: ""
 MainMod: "(rsc/TOPCOMMENT:Comment)[wut:PackageStart][wut:PackageEnd]"
 ModDef: ""
 Mod: "(rsc/TOPCOMMENT:Comment)"
 MainBinDef: ""
 MainBin: "(rsc/TOPCOMMENT:Comment)"
 MainTestDef: ""
 MainTest: "(rsc/TOPCOMMENT:Comment)"
 Meta: ""
 Comment: "// "
 PackageStart: "namespace ${me}\n{"
 PackageEnd: "}// namespace ${me}"
 SourceSubPath: ""           
 TestsSubPath: "test"            
 MetaFileName: ""            
 MainDefFileName: "Wut"      
 MainModFileName: "Wut"      
 MainModFileSubPath: ""     
 MainBinFileName: "izit"    
 MainBinFileSubPath: "cmd"     
 MainTestFileName: "test"   
 MainModuleName: "Wut"      
 MainModuleRequirements:    
 MakeClean: "cd ../wutcs; rm *.dll; cd cmd; rm *.exe"               
 MakeLib: "cd ../wutcs; csc -target:library -out:Wut.dll *.cs"                 
 MakeBin: "cd ../wutcs/cmd; csc -reference:../Wut.dll izit.cs"                 
 MakeTest: ""                
 DoTest: ""
wutware:
 Language: vhdl
 Path: "../wutware"
 SourceFiles: " [Izit.vhdl:MainBin]  [Test.vhdl:MainTest] [Wut.vhdl:MainMod] [<encoder>.vhdl:Mod] [LICENSE:License] "
 MainModDef: ""
 MainMod: "(rsc/TOPCOMMENT:Comment)[wut:PackageStart]"
 ModDef: ""
 Mod: "(rsc/TOPCOMMENT:Comment)"
 MainBinDef: ""
 MainBin: "(rsc/TOPCOMMENT:Comment)"
 MainTestDef: ""
 MainTest: "(rsc/TOPCOMMENT:Comment)"
 Meta: ""
 Comment: "-- "
 PackageStart: "-- Package ${me}"
 SourceSubPath: ""
 TestsSubPath: ""
 MetaFileName: ""
 MainDefFileName: ""
 MainModFileName: "wut"
 MainModFileSubPath: ""  
 MainBinFileName: "izit"   
 MainBinFileSubPath: ""        
 MainTestFileName: "test"
 MainModuleName: "Wut"
 MainModuleRequirements:
 MakeClean: ""               
 MakeLib: ""                 
 MakeBin: ""                 
 MakeTest: ""                
 DoTest: ""
wuths:
 Language: Haskell
 Path: "../wuths"
 SourceFiles: " [izit.hs:MainBin]  [test.hs:MainTest] [wut.hs:MainMod] [<encoder>.hs:Mod] [LICENSE:License] "
 MainModDef: ""
 MainMod: "(rsc/TOPCOMMENT:Comment)[wut:PackageStart]"
 ModDef: ""
 Mod: "(rsc/TOPCOMMENT:Comment)"
 MainBinDef: ""
 MainBin: "(rsc/TOPCOMMENT:Comment)"
 MainTestDef: ""
 MainTest: "(rsc/TOPCOMMENT:Comment)"
 Meta: ""
 Comment: "-- "
 PackageStart: "-- Package ${me}"
 SourceSubPath: ""
 TestsSubPath: ""
 MetaFileName: ""
 MainDefFileName: ""
 MainModFileName: "wut"
 MainModFileSubPath: ""  
 MainBinFileName: "izit"      
 MainBinFileSubPath: ""         
 MainTestFileName: "test"
 MainModuleName: "Wut"
 MainModuleRequirements:
 MakeClean: ""               
 MakeLib: ""                 
 MakeBin: ""                 
 MakeTest: ""                
 DoTest: ""
wutjs:                          
 Language: Javascript              
 Path: "../wutjs"              
 SourceFiles: " [izit.js:MainBin]  [test.js:MainTest] [index.js:MainMod] [<encoder>.js:Mod] [package.json:Meta] [LICENSE:License] "
 MainModDef: ""
 MainMod: "(rsc/TOPCOMMENT:Comment)[wut:PackageStart][<encoder>:Import][<_top_/Provides>:Method]"
 ModDef: ""
 Mod: "(rsc/TOPCOMMENT:Comment)[{encoder}:PackageStart][{encoder}:StructureStart][<encoder/Contains>:StructureElement][{encoder}:StructureEnd][<encoder/Provides>:Method]"
 MainBinDef: ""
 MainBin: "(rsc/TOPCOMMENT:Comment)[main:PackageStart][wut:Import][main:Method][<_cmd_/Provides>:Method]"
 MainTestDef: ""
 MainTest: "(rsc/TOPCOMMENT:Comment)[test:PackageStart][wut:Import][test:Method][<_tst_/Provides>:Method]"
 Meta: ""
 Comment: "// "
 PackageStart: "\n// Package ${me}"
 Import: "\nimport ${me}"
 Method: "\nfunc ${me}(){\n}"
 StructureStart: "\ntype ${me} struct {"
 StructureEnd: "}"
 StructureElement: "  ${me}"
 SourceSubPath: ""              
 TestsSubPath: ""               
 MetaFileName: "package.json"
 MainDefFileName: ""
 MainModFileName: "index"      
 MainModFileSubPath: ""         
 MainBinFileName: "izit"      
 MainBinFileSubPath: ""         
 MainTestFileName: "test"     
 MainModuleName: "Wut"          
 MainModuleRequirements:        
 MakeClean: ""               
 MakeLib: ""                 
 MakeBin: ""                 
 MakeTest: "cd ../wutjs; LD_LIBRARY_PATH=/opt/rh/rh-nodejs4/root/usr/lib64:LD_LIBRARY_PATH /opt/rh/rh-nodejs4/root/usr/bin/node test.js"                
 DoTest: ""

